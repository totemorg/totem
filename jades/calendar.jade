extends base
append base_help
	:markdown
		# calendar
		Provides a calendar for booking events

append base_parms
	- tech = "calendar"

append base_body
	script.
		const
			calData = "http://localhost:8080/events",
			calFree = "reserved",
			calInstructor = "Toby James",
			calType = "Guitar",
			calMonths = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],
			calDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];

		function getAvail( cb ) {
			function availHours(data) {
				const
					myHours = [ [], [], [], [], [], [], [] ];
					/*myHours = [
						['1:30', '2:30', '3:30', '4:30', '5:30', '6:30'],
						['2:00'],
						['3:00'],
						['4:00'],
						['5:00']
					];*/

				//console.log(data);
				data.forEach( ev => {
					ev.Date = new Date(ev.Date);
					myHours[ ev.Date.getDay() ].push( ev.Date.getHours() + ":00" );
				});
				return myHours;
			}

			const 
				now = new Date(),
				yr = now.getFullYear(),
				mth = now.getMonth(),
				date = now.getDate(),
				day = now.getDay(),
				startDate = (new Date(yr, mth, date - day)).toISOString(),
				endDate = (new Date(yr, mth, date - day + 6)).toISOString(),
				query = { Resource: calInstructor, Client: calFree, Type: calType, "Date_in": `${startDate},${endDate}` };

			Ajax( query, "get", calData, res => cb( availHours(JSON.parse(res)) ) );
		}

		getAvail( hours => {
			var bookings = ``;
			$("#content").markyourcalendar({
				availability: hours,
				isMultiple: false,
				months: calMonths,
				weekdays: calDays,
				startDate: new Date("09/oct/2022"),
				//selectedDates: ["12/oct/2022"],
				onClick: (ev, data) => {
					//console.log("click", data);
					if ( ioClient.startsWith("guest") )
						alert("Please login to make your reservation");
						
					else {
						data.forEach( datetime => {
							const 
								[d,t] = datetime.split(' '),
								msg = `Thank you ${ioClient}.  See you ${d}-${t} for your ${calType} lesson with ${calInstructor}`;
								
							bookings += msg.tag("p");
							Ajax( {Client: ioClient}, "put", calData.tag("?", { Date: datetime, Type: calType}), res => alert( msg ) );
						});
						$('#status').html(bookings);
					}
				},
				onClickNavigator: (ev, instance) => {
					//console.log(ev);
					const offset = (ev.target.id == "myc-prev-week") ? -7 : +7;

					now.setDate( now.getDate() + offset );
					//console.log(now);
					getAvail( hours => {
						instance.setAvailability(hours);
					});
				}
			});
		});

