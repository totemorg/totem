# ENUMS

Provides methods to copy, enumerate, stream and serialize data.

## Installation

Clone [ENUMS enumerators](https://github.com/totemstan/enum) || [COE](https://sc.appdev.proj.coe/acmesds/enum) || [SBU](https://gitlab.west.nga.ic.gov/acmesds/enum) into your PROJECT folder.  

## Manage 

From terminal:

	npm test [ ? || E1 || ...]			# Unit test
	npm run [ edit || start ]			# Configure environment
	npm run [ prmprep || prmload ]		# Revise PRM

## Usage

From your module:

	const { Copy, Each, Extend, Stream, ... } = require("enum");  	// extract required methods
	
Shallow and deep copy objects using:

	Copy(src,tar)  		// shallow copy src to tar 
	Copy(src,tar,key)  // deep copy src to tar 

where a deep copy key = "." copies as follows:

	src = {
		A: value,			// sets target[A] = value

		"A.B.C": value, 	// sets target[A][B][C] = value

		"A.B.C.": {			// appends X,Y to target[A][B][C]
			X:value, Y:value, ...
		},	

		OBJECT: [ 			// prototype OBJECT (Array,String,Date,Object) = method X,Y, ...
			function X() {}, 
			function Y() {}, 
		... ],

		Function: 			// append method X to ENUMS callback stack
			function X() {}
	}

Extend constructors using:

 	[ prototype, ...].Extend( Array || String || Date || Object )
	
Enumerate a src array or object using:

	Each(src, (key,val) => {
	})

Stream a src array, object or file using:


	Stream(src, opts, (rec,key,res) => {
		if ( res ) // still streaming 
			res( msg || undefined )  // pass undefined to bypass msg stacking

		else 
			// streaming done so key contains msg stack
	})
	
Serialize a list:

	function fetcher( rec, info => { 
	});
	
	[ rec, ...].serialize( fetcher, (rec, fails) => {
		if ( rec ) 
			// rec = record being serialized
		else
			// done. fails = number of failed fetches
	}
	
or a string:

	function fetcher( rec, ex => {
		// regexp arguments rec.arg0, rec.arg1, rec.arg2, ...
		// rec.ID = record number being processed
		return "replaced string";
	});
	
	"string to search".serialize( fetcher, regex, "placeholder key", str => { 
		// str = final string with all replacements made
	});
	
Test an object x:

	isString(x), isDate(x), isFunction(x), isArray(x), isObject(x)
	isEmpty(x), isNumber(x), isKeyed(x), isBoolean(x), isBuffer(x)
	isError(x)

Get data from a stream x:

	x.get( index, data => { ... } )

## Contacting, Contributing, Following

Feel free to [submit and status TOTEM issues](http://totem.zapto.org/issues.view) || [COE](https://totem.west.ile.nga.ic.gov/issues.view) || [SBU](https://totem.nga.mil/issues.view), [contribute TOTEM notebooks](http://totem.zapto.org/shares/notebooks/) || [COE](https://totem.west.ile.nga.ic.gov/shares/notebooks/) || [SBU](https://totem.nga.mil/shares/notebooks/),
[inspect TOTEM requirements](http://totem.zapto.org/reqts.view) || [COE](https://totem.west.ile.nga.ic.gov/reqts.view) || [SBU](https://totem.nga.mil/reqts.view), [browse TOTEM holdings](http://totem.zapto.org/) || [COE](https://totem.west.ile.nga.ic.gov/) || [SBU](https://totem.nga.mil/), 
or [follow TOTEM milestones](http://totem.zapto.org/milestones.view) || [COE](https://totem.west.ile.nga.ic.gov/milestones.view) || [SBU](https://totem.nga.mil/milestones.view).


## License

[MIT](LICENSE)

{{>main}}

* * *

&copy; 2012 ACMESDS
